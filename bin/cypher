#!/usr/bin/python
import os
import sys
from neo4j.v1 import GraphDatabase


def optional(value, default):
    if value == None:
        return default
    return value


def get(arr, index):
    try:
        return arr[index]
    except IndexError:
        return None


def latestTx(session):
    """
    No args
    Returns the latests transaction on the connected db (using bookmarks)
    """

    def anyTx(tx):
        tx.run("RETURN COUNT(*)")

    session.write_transaction(anyTx)
    print session.last_bookmark()


def makeTx(session):
    """
    argv[2] = times, default 1
    Creates a transaction (Person)-KNOWS->(Person)
    """
    QUERY = "UNWIND $batch AS b CREATE (p:Person)-[:KNOWS]->(q:Person)"

    times = int(optional(get(sys.argv, 2), 1))
    batchSize = min(times / 10, 100)
    numberOfBatches = times / batchSize
    sys.stderr.write(
        "Creating %d batches of size %d totalling %d node-node pairs\n" %
        (numberOfBatches, batchSize, numberOfBatches * batchSize))
    for i in range(0, numberOfBatches):
        with session.begin_transaction() as tx:
            tx.run(QUERY, batch=[1] * batchSize)
        sys.stderr.write("Completed %d of %d transactions\r" % (i * batchSize,
                                                                times))


def countNodes(session):
    """
    No args
    Counts all the nodes in the database
    """

    def countNode(tx):
        for record in tx.run("MATCH (a) RETURN COUNT(a)"):
            print record[0]

    session.write_transaction(countNode)

def wipe(session):
    """
    No args
    Wipe all the nodes in the database
    """
    with session.begin_transaction() as tx:
        tx.run("MATCH (a)-[b]-(c) DELETE c,b,a")
        tx.run("MATCH (n) DELETE n")


COMMANDS = {}
COMMANDS["latestTx"] = latestTx
COMMANDS["makeTx"] = makeTx
COMMANDS["countNodes"] = countNodes
COMMANDS["wipe"] = wipe

LOGIN = os.getenv("cypher_login", "neo4j")
PASSWORD = os.getenv("cypher_passwd", "neo4j")
ADDRESS = os.getenv("cypher_addr", "localhost:7687")
PROTOCOL = os.getenv("cypher_proto", "bolt+routing")

# /db/data ?
if len(sys.argv) < 2:
    cmd = "--help"
else:
    cmd = sys.argv[1]
if cmd in ["--help", "help", "-h"]:
    print "Override address and credentials with cypher_ login, passwd, proto, and addr"
    print "Will use %s:%s@%s://%s" % (LOGIN, PASSWORD, PROTOCOL, ADDRESS)
    print
    for cmdName in COMMANDS.keys():
        print cmdName
        print COMMANDS[cmdName].__doc__
        print
    exit(0)

if not COMMANDS.has_key(cmd):
    raise ValueError("Command %s doesn't match %s" % (cmd, COMMANDS.keys()))

driver = GraphDatabase.driver(
    PROTOCOL + "://" + ADDRESS, auth=(LOGIN, PASSWORD))
session = driver.session()
COMMANDS[cmd](session)
